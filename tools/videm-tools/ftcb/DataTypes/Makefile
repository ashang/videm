##
## Auto generated by Builder "GNU makefile for g++/gcc" of Videm
## Do not edit this file, any manual changes will be erased
##

##
## User defined environment variables
##
CodeLiteDir:=/usr/share/codelite
VimLiteDir:=~/.vimlite
OO:=oooo

# ===== Compiler Variables =====
CCmpCmd      = gcc $(CPPFLAGS) $(CFLAGS) -o $(ObjectFile) -c $(SourceFile)
CxxCmpCmd    = gcc $(CPPFLAGS) $(CXXFLAGS) -o $(ObjectFile) -c $(SourceFile)
CPrpCmd      = gcc -E $(CPPFLAGS) -o $(PrePrcFile) $(SourceFile)
CxxPrpCmd    = gcc -E $(CPPFLAGS) -o $(PrePrcFile) $(SourceFile)
CDepGenCmd   = gcc $(CPPFLAGS) -MG -MP -MT$(ObjectFile) -MF$(DependFile) -MM $(SourceFile)
CxxDepGenCmd = gcc $(CPPFLAGS) -MG -MP -MT$(ObjectFile) -MF$(DependFile) -MM $(SourceFile)
LinkCmd      = gcc -o $(OutputFile) $(Objects) $(LDFLAGS)
ArGenCmd     = ar rcus $(OutputFile) $(Objects)
SoGenCmd     = gcc -shared -fPIC -o $(OutputFile) $(Objects) $(LDFLAGS)

ObjExt := .o
DepExt := .d
PrpExt := .E

CmpIncPaths := 
CmpLibPaths := 

IncPat = -I$(Dir)
MacPat = -D$(Mac)
LipPat = -L$(Lip)
LibPat = -l$(Lib)

## ===== Project Variables =====
WorkspaceName          := videm-tools
WorkspacePath          := $(CURDIR)/../..
ProjectName            := DataTypes
ProjectPath            := $(CURDIR)
ConfigurationName      := Release_SL
IntermediateDirectory  := $(ConfigurationName)
OutDir                 := $(IntermediateDirectory)
User                   := eph
Date                   := 2014-03-13
OutputFile             := ../lib/lib$(ProjectName).a
CPPFLAGS               := 
CCXXFLAGS              := 
CFLAGS                 := $(CCXXFLAGS)
CFLAGS                 += -g -Wall
CXXFLAGS               := $(CCXXFLAGS)
CXXFLAGS               += -g -Wall
IncPaths               := . . ../include
Macros                 := 
LDFLAGS                := 
LibPaths               := .
Libraries              := 
ProjectType            := ar

# auto
CPPFLAGS  += $(foreach Dir,$(CmpIncPaths) $(IncPaths),$(IncPat))
CPPFLAGS  += $(foreach Mac,$(Macros),$(MacPat))
LDFLAGS   += $(foreach Lip,$(CmpLibPaths) $(LibPaths),$(LipPat))
LDFLAGS   += $(foreach Lib,$(Libraries),$(LibPat))

# ###
SourceFile = $<
ObjectFile = $(OutDir)/$(notdir $(basename $(SourceFile)))$(ObjExt)
DependFile = $(OutDir)/$(notdir $(basename $(SourceFile)))$(DepExt)
PrePrcFile = $(OutDir)/$(notdir $(basename $(SourceFile)))$(PrpExt)

# ===== Sources and Objects and Depends and PrePrcs =====
Sources := \
    src/ftString.c \
    src/ftHashTable.c \
    src/ftStack.c \
    src/ftCMacro.c \
    src/ftError.c \
    src/ftSingleList.c \
    src/ftDoubleList.c \
    src/ftCommon.c \


Objects := \
    $(OutDir)/ftString$(ObjExt) \
    $(OutDir)/ftHashTable$(ObjExt) \
    $(OutDir)/ftStack$(ObjExt) \
    $(OutDir)/ftCMacro$(ObjExt) \
    $(OutDir)/ftError$(ObjExt) \
    $(OutDir)/ftSingleList$(ObjExt) \
    $(OutDir)/ftDoubleList$(ObjExt) \
    $(OutDir)/ftCommon$(ObjExt) \


Depends := $(foreach Src,$(Sources),$(OutDir)/$(notdir $(basename $(Src)))$(DepExt))
PrePrcs := $(foreach Src,$(Sources),$(OutDir)/$(notdir $(basename $(Src)))$(PrpExt))

MKDIR = mkdir -p
PHONY = all clean PreBuild Building PostBuild DirSanity

# ===== Targets =====
all: DirSanity PostBuild

PostBuild: Building


Building: $(OutputFile)

$(OutputFile): $(Objects)
ifeq ($(ProjectType),app)
	$(LinkCmd)
endif
ifeq ($(ProjectType),so)
	$(SoGenCmd)
endif
ifeq ($(ProjectType),ar)
	$(ArGenCmd)
endif

$(Objects): | PreBuild

PreBuild:


DirSanity:
	@$(MKDIR) $(OutDir)
	@$(MKDIR) $(dir $(OutputFile))

clean:
	$(RM) $(PrePrcs)
	$(RM) $(Depends)
	$(RM) $(Objects)
	$(RM) $(OutputFile)

$(OutDir)/ftString$(PrpExt): src/ftString.c
	$(CPrpCmd)

$(OutDir)/ftString$(ObjExt): src/ftString.c $(OutDir)/ftString$(DepExt)
	$(CCmpCmd)

$(OutDir)/ftString$(DepExt): src/ftString.c
	@$(CDepGenCmd)

$(OutDir)/ftHashTable$(PrpExt): src/ftHashTable.c
	$(CPrpCmd)

$(OutDir)/ftHashTable$(ObjExt): src/ftHashTable.c $(OutDir)/ftHashTable$(DepExt)
	$(CCmpCmd)

$(OutDir)/ftHashTable$(DepExt): src/ftHashTable.c
	@$(CDepGenCmd)

$(OutDir)/ftStack$(PrpExt): src/ftStack.c
	$(CPrpCmd)

$(OutDir)/ftStack$(ObjExt): src/ftStack.c $(OutDir)/ftStack$(DepExt)
	$(CCmpCmd)

$(OutDir)/ftStack$(DepExt): src/ftStack.c
	@$(CDepGenCmd)

$(OutDir)/ftCMacro$(PrpExt): src/ftCMacro.c
	$(CPrpCmd)

$(OutDir)/ftCMacro$(ObjExt): src/ftCMacro.c $(OutDir)/ftCMacro$(DepExt)
	$(CCmpCmd)

$(OutDir)/ftCMacro$(DepExt): src/ftCMacro.c
	@$(CDepGenCmd)

$(OutDir)/ftError$(PrpExt): src/ftError.c
	$(CPrpCmd)

$(OutDir)/ftError$(ObjExt): src/ftError.c $(OutDir)/ftError$(DepExt)
	$(CCmpCmd)

$(OutDir)/ftError$(DepExt): src/ftError.c
	@$(CDepGenCmd)

$(OutDir)/ftSingleList$(PrpExt): src/ftSingleList.c
	$(CPrpCmd)

$(OutDir)/ftSingleList$(ObjExt): src/ftSingleList.c $(OutDir)/ftSingleList$(DepExt)
	$(CCmpCmd)

$(OutDir)/ftSingleList$(DepExt): src/ftSingleList.c
	@$(CDepGenCmd)

$(OutDir)/ftDoubleList$(PrpExt): src/ftDoubleList.c
	$(CPrpCmd)

$(OutDir)/ftDoubleList$(ObjExt): src/ftDoubleList.c $(OutDir)/ftDoubleList$(DepExt)
	$(CCmpCmd)

$(OutDir)/ftDoubleList$(DepExt): src/ftDoubleList.c
	@$(CDepGenCmd)

$(OutDir)/ftCommon$(PrpExt): src/ftCommon.c
	$(CPrpCmd)

$(OutDir)/ftCommon$(ObjExt): src/ftCommon.c $(OutDir)/ftCommon$(DepExt)
	$(CCmpCmd)

$(OutDir)/ftCommon$(DepExt): src/ftCommon.c
	@$(CDepGenCmd)

# Generate and include dependencies if we can
ifeq ($(shell test -d $(OutDir) && echo yes || echo no),yes)
  ifeq ($(shell test -f $(word 1,$(Depends)) && echo yes || echo no),yes)
    include $(Depends)
  endif
endif

.PHONY: $(PHONY)

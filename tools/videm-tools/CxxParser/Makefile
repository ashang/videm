##
## Auto generated by Builder "GNU makefile for g++/gcc" of Videm
## Do not edit this file, any manual changes will be erased
##

##
## User defined environment variables
##
CodeLiteDir:=/usr/share/codelite
VimLiteDir:=~/.vimlite
OO:=oooo

# ===== Compiler Variables =====
CCmpCmd      = gcc $(CPPFLAGS) $(CFLAGS) -o $(ObjectFile) -c $(SourceFile)
CxxCmpCmd    = g++ $(CPPFLAGS) $(CXXFLAGS) -o $(ObjectFile) -c $(SourceFile)
CPrpCmd      = gcc -E $(CPPFLAGS) -o $(PrePrcFile) $(SourceFile)
CxxPrpCmd    = g++ -E $(CPPFLAGS) -o $(PrePrcFile) $(SourceFile)
CDepGenCmd   = gcc $(CPPFLAGS) -MG -MP -MT$(ObjectFile) -MF$(DependFile) -MM $(SourceFile)
CxxDepGenCmd = g++ $(CPPFLAGS) -MG -MP -MT$(ObjectFile) -MF$(DependFile) -MM $(SourceFile)
LinkCmd      = g++ -o $(OutputFile) $(Objects) $(LDFLAGS)
ArGenCmd     = ar rcus $(OutputFile) $(Objects)
SoGenCmd     = g++ -shared -fPIC -o $(OutputFile) $(Objects) $(LDFLAGS)

ObjExt := .o
DepExt := .d
PrpExt := .E

CmpIncPaths := 
CmpLibPaths := 

IncPat = -I$(Dir)
MacPat = -D$(Mac)
LipPat = -L$(Lip)
LibPat = -l$(Lib)

## ===== Project Variables =====
WorkspaceName          := videm-tools
WorkspacePath          := $(CURDIR)/..
ProjectName            := CxxParser
ProjectPath            := $(CURDIR)
ConfigurationName      := Release_Unix_dll
IntermediateDirectory  := $(ConfigurationName)
OutDir                 := $(IntermediateDirectory)
User                   := eph
Date                   := 2014-03-13
OutputFile             := $(IntermediateDirectory)/lib$(ProjectName).so
CPPFLAGS               := 
CCXXFLAGS              := 
CFLAGS                 := $(CCXXFLAGS)
CFLAGS                 += -Wall -O2 -Wshadow -fPIC
CXXFLAGS               := $(CCXXFLAGS)
CXXFLAGS               += -Wall -O2 -Wshadow -fPIC
IncPaths               := . .
Macros                 := 
LDFLAGS                := 
LibPaths               := .
Libraries              := 
ProjectType            := so

# auto
CPPFLAGS  += $(foreach Dir,$(CmpIncPaths) $(IncPaths),$(IncPat))
CPPFLAGS  += $(foreach Mac,$(Macros),$(MacPat))
LDFLAGS   += $(foreach Lip,$(CmpLibPaths) $(LibPaths),$(LipPat))
LDFLAGS   += $(foreach Lib,$(Libraries),$(LibPat))

# ###
SourceFile = $<
ObjectFile = $(OutDir)/$(notdir $(basename $(SourceFile)))$(ObjExt)
DependFile = $(OutDir)/$(notdir $(basename $(SourceFile)))$(DepExt)
PrePrcFile = $(OutDir)/$(notdir $(basename $(SourceFile)))$(PrpExt)

# ===== Sources and Objects and Depends and PrePrcs =====
Sources := \
    CxxLexer.c \
    CxxTokenReader.cpp \
    CxxParseType.cpp \
    pystring.cpp \
    CxxHWParser.cpp \
    Utils.cpp \
    CxxParserCommon.cpp \
    CxxLexPrvtData.c \


Objects := \
    $(OutDir)/CxxLexer$(ObjExt) \
    $(OutDir)/CxxTokenReader$(ObjExt) \
    $(OutDir)/CxxParseType$(ObjExt) \
    $(OutDir)/pystring$(ObjExt) \
    $(OutDir)/CxxHWParser$(ObjExt) \
    $(OutDir)/Utils$(ObjExt) \
    $(OutDir)/CxxParserCommon$(ObjExt) \
    $(OutDir)/CxxLexPrvtData$(ObjExt) \


Depends := $(foreach Src,$(Sources),$(OutDir)/$(notdir $(basename $(Src)))$(DepExt))
PrePrcs := $(foreach Src,$(Sources),$(OutDir)/$(notdir $(basename $(Src)))$(PrpExt))

MKDIR = mkdir -p
PHONY = all clean PreBuild Building PostBuild DirSanity

# ===== Targets =====
all: DirSanity PostBuild

PostBuild: Building
	@echo ===== Post Build Commands Start... =====
	@mkdir -p ../_videm/lib
	@cp -v $(OutputFile) ../_videm/lib
	@echo ===== Post Build Commands Done. =====


Building: $(OutputFile)

$(OutputFile): $(Objects)
ifeq ($(ProjectType),app)
	$(LinkCmd)
endif
ifeq ($(ProjectType),so)
	$(SoGenCmd)
endif
ifeq ($(ProjectType),ar)
	$(ArGenCmd)
endif

$(Objects): | PreBuild

PreBuild:


DirSanity:
	@$(MKDIR) $(OutDir)
	@$(MKDIR) $(dir $(OutputFile))

clean:
	$(RM) $(PrePrcs)
	$(RM) $(Depends)
	$(RM) $(Objects)
	$(RM) $(OutputFile)

$(OutDir)/CxxLexer$(PrpExt): CxxLexer.c
	$(CPrpCmd)

$(OutDir)/CxxLexer$(ObjExt): CxxLexer.c $(OutDir)/CxxLexer$(DepExt)
	$(CCmpCmd)

$(OutDir)/CxxLexer$(DepExt): CxxLexer.c
	@$(CDepGenCmd)

$(OutDir)/CxxTokenReader$(PrpExt): CxxTokenReader.cpp
	$(CxxPrpCmd)

$(OutDir)/CxxTokenReader$(ObjExt): CxxTokenReader.cpp $(OutDir)/CxxTokenReader$(DepExt)
	$(CxxCmpCmd)

$(OutDir)/CxxTokenReader$(DepExt): CxxTokenReader.cpp
	@$(CxxDepGenCmd)

$(OutDir)/CxxParseType$(PrpExt): CxxParseType.cpp
	$(CxxPrpCmd)

$(OutDir)/CxxParseType$(ObjExt): CxxParseType.cpp $(OutDir)/CxxParseType$(DepExt)
	$(CxxCmpCmd)

$(OutDir)/CxxParseType$(DepExt): CxxParseType.cpp
	@$(CxxDepGenCmd)

$(OutDir)/pystring$(PrpExt): pystring.cpp
	$(CxxPrpCmd)

$(OutDir)/pystring$(ObjExt): pystring.cpp $(OutDir)/pystring$(DepExt)
	$(CxxCmpCmd)

$(OutDir)/pystring$(DepExt): pystring.cpp
	@$(CxxDepGenCmd)

$(OutDir)/CxxHWParser$(PrpExt): CxxHWParser.cpp
	$(CxxPrpCmd)

$(OutDir)/CxxHWParser$(ObjExt): CxxHWParser.cpp $(OutDir)/CxxHWParser$(DepExt)
	$(CxxCmpCmd)

$(OutDir)/CxxHWParser$(DepExt): CxxHWParser.cpp
	@$(CxxDepGenCmd)

$(OutDir)/Utils$(PrpExt): Utils.cpp
	$(CxxPrpCmd)

$(OutDir)/Utils$(ObjExt): Utils.cpp $(OutDir)/Utils$(DepExt)
	$(CxxCmpCmd)

$(OutDir)/Utils$(DepExt): Utils.cpp
	@$(CxxDepGenCmd)

$(OutDir)/CxxParserCommon$(PrpExt): CxxParserCommon.cpp
	$(CxxPrpCmd)

$(OutDir)/CxxParserCommon$(ObjExt): CxxParserCommon.cpp $(OutDir)/CxxParserCommon$(DepExt)
	$(CxxCmpCmd)

$(OutDir)/CxxParserCommon$(DepExt): CxxParserCommon.cpp
	@$(CxxDepGenCmd)

$(OutDir)/CxxLexPrvtData$(PrpExt): CxxLexPrvtData.c
	$(CPrpCmd)

$(OutDir)/CxxLexPrvtData$(ObjExt): CxxLexPrvtData.c $(OutDir)/CxxLexPrvtData$(DepExt)
	$(CCmpCmd)

$(OutDir)/CxxLexPrvtData$(DepExt): CxxLexPrvtData.c
	@$(CDepGenCmd)

# Generate and include dependencies if we can
ifeq ($(shell test -d $(OutDir) && echo yes || echo no),yes)
  ifeq ($(shell test -f $(word 1,$(Depends)) && echo yes || echo no),yes)
    include $(Depends)
  endif
endif

.PHONY: $(PHONY)

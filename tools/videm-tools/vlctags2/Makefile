##
## Auto generated by Builder "GNU makefile for g++/gcc" of Videm
## Do not edit this file, any manual changes will be erased
##

##
## User defined environment variables
##
CodeLiteDir:=/usr/share/codelite
VimLiteDir:=~/.vimlite
OO:=oooo

# ===== Compiler Variables =====
CCmpCmd      = gcc $(CPPFLAGS) $(CFLAGS) -o $(ObjectFile) -c $(SourceFile)
CxxCmpCmd    = gcc $(CPPFLAGS) $(CXXFLAGS) -o $(ObjectFile) -c $(SourceFile)
CPrpCmd      = gcc -E $(CPPFLAGS) -o $(PrePrcFile) $(SourceFile)
CxxPrpCmd    = gcc -E $(CPPFLAGS) -o $(PrePrcFile) $(SourceFile)
CDepGenCmd   = gcc $(CPPFLAGS) -MG -MP -MT$(ObjectFile) -MF$(DependFile) -MM $(SourceFile)
CxxDepGenCmd = gcc $(CPPFLAGS) -MG -MP -MT$(ObjectFile) -MF$(DependFile) -MM $(SourceFile)
LinkCmd      = gcc -o $(OutputFile) $(Objects) $(LDFLAGS)
ArGenCmd     = ar rcus $(OutputFile) $(Objects)
SoGenCmd     = gcc -shared -fPIC -o $(OutputFile) $(Objects) $(LDFLAGS)

ObjExt := .o
DepExt := .d
PrpExt := .E

CmpIncPaths := 
CmpLibPaths := 

IncPat = -I$(Dir)
MacPat = -D$(Mac)
LipPat = -L$(Lip)
LibPat = -l$(Lib)

## ===== Project Variables =====
WorkspaceName          := videm-tools
WorkspacePath          := $(CURDIR)/..
ProjectName            := vlctags2
ProjectPath            := $(CURDIR)
ConfigurationName      := Release_Unix
IntermediateDirectory  := $(ConfigurationName)
OutDir                 := $(IntermediateDirectory)
User                   := eph
Date                   := 2014-03-13
OutputFile             := $(IntermediateDirectory)/$(ProjectName)
CPPFLAGS               := 
CCXXFLAGS              := 
CFLAGS                 := $(CCXXFLAGS)
CFLAGS                 += -g -Wall -O2
CXXFLAGS               := $(CCXXFLAGS)
CXXFLAGS               += -g -Wall -O2
IncPaths               := . . ../ftcb/include ../IntExpr
Macros                 := HAVE_CONFIG_H
LDFLAGS                := 
LibPaths               := . ../ftcb/lib ../IntExpr/lib
Libraries              := DataTypes IntExpr
ProjectType            := app

# auto
CPPFLAGS  += $(foreach Dir,$(CmpIncPaths) $(IncPaths),$(IncPat))
CPPFLAGS  += $(foreach Mac,$(Macros),$(MacPat))
LDFLAGS   += $(foreach Lip,$(CmpLibPaths) $(LibPaths),$(LipPat))
LDFLAGS   += $(foreach Lib,$(Libraries),$(LibPat))

# ###
SourceFile = $<
ObjectFile = $(OutDir)/$(notdir $(basename $(SourceFile)))$(ObjExt)
DependFile = $(OutDir)/$(notdir $(basename $(SourceFile)))$(DepExt)
PrePrcFile = $(OutDir)/$(notdir $(basename $(SourceFile)))$(PrpExt)

# ===== Sources and Objects and Depends and PrePrcs =====
Sources := \
    ant.c \
    args.c \
    asm.c \
    asp.c \
    awk.c \
    basic.c \
    beta.c \
    c.c \
    cobol.c \
    debug.c \
    dosbatch.c \
    eiffel.c \
    entry.c \
    erlang.c \
    flex.c \
    fortran.c \
    get.c \
    html.c \
    jscript.c \
    keyword.c \
    lisp.c \
    lregex.c \
    lua.c \
    main.c \
    make.c \
    matlab.c \
    ocaml.c \
    options.c \
    parse.c \
    pascal.c \
    perl.c \
    php.c \
    python.c \
    read.c \
    readtags.c \
    rexx.c \
    routines.c \
    ruby.c \
    scheme.c \
    sh.c \
    slang.c \
    sml.c \
    sort.c \
    sql.c \
    strlist.c \
    tcl.c \
    tex.c \
    verilog.c \
    vhdl.c \
    vim.c \
    vstring.c \
    yacc.c \
    macro.c \


Objects := \
    $(OutDir)/ant$(ObjExt) \
    $(OutDir)/args$(ObjExt) \
    $(OutDir)/asm$(ObjExt) \
    $(OutDir)/asp$(ObjExt) \
    $(OutDir)/awk$(ObjExt) \
    $(OutDir)/basic$(ObjExt) \
    $(OutDir)/beta$(ObjExt) \
    $(OutDir)/c$(ObjExt) \
    $(OutDir)/cobol$(ObjExt) \
    $(OutDir)/debug$(ObjExt) \
    $(OutDir)/dosbatch$(ObjExt) \
    $(OutDir)/eiffel$(ObjExt) \
    $(OutDir)/entry$(ObjExt) \
    $(OutDir)/erlang$(ObjExt) \
    $(OutDir)/flex$(ObjExt) \
    $(OutDir)/fortran$(ObjExt) \
    $(OutDir)/get$(ObjExt) \
    $(OutDir)/html$(ObjExt) \
    $(OutDir)/jscript$(ObjExt) \
    $(OutDir)/keyword$(ObjExt) \
    $(OutDir)/lisp$(ObjExt) \
    $(OutDir)/lregex$(ObjExt) \
    $(OutDir)/lua$(ObjExt) \
    $(OutDir)/main$(ObjExt) \
    $(OutDir)/make$(ObjExt) \
    $(OutDir)/matlab$(ObjExt) \
    $(OutDir)/ocaml$(ObjExt) \
    $(OutDir)/options$(ObjExt) \
    $(OutDir)/parse$(ObjExt) \
    $(OutDir)/pascal$(ObjExt) \
    $(OutDir)/perl$(ObjExt) \
    $(OutDir)/php$(ObjExt) \
    $(OutDir)/python$(ObjExt) \
    $(OutDir)/read$(ObjExt) \
    $(OutDir)/readtags$(ObjExt) \
    $(OutDir)/rexx$(ObjExt) \
    $(OutDir)/routines$(ObjExt) \
    $(OutDir)/ruby$(ObjExt) \
    $(OutDir)/scheme$(ObjExt) \
    $(OutDir)/sh$(ObjExt) \
    $(OutDir)/slang$(ObjExt) \
    $(OutDir)/sml$(ObjExt) \
    $(OutDir)/sort$(ObjExt) \
    $(OutDir)/sql$(ObjExt) \
    $(OutDir)/strlist$(ObjExt) \
    $(OutDir)/tcl$(ObjExt) \
    $(OutDir)/tex$(ObjExt) \
    $(OutDir)/verilog$(ObjExt) \
    $(OutDir)/vhdl$(ObjExt) \
    $(OutDir)/vim$(ObjExt) \
    $(OutDir)/vstring$(ObjExt) \
    $(OutDir)/yacc$(ObjExt) \
    $(OutDir)/macro$(ObjExt) \


Depends := $(foreach Src,$(Sources),$(OutDir)/$(notdir $(basename $(Src)))$(DepExt))
PrePrcs := $(foreach Src,$(Sources),$(OutDir)/$(notdir $(basename $(Src)))$(PrpExt))

MKDIR = mkdir -p
PHONY = all clean PreBuild Building PostBuild DirSanity

# ===== Targets =====
all: DirSanity PostBuild

PostBuild: Building
	@echo ===== Post Build Commands Start... =====
	@mkdir -p ../_videm/bin
	@cp -v $(OutputFile) ../_videm/bin
	@echo ===== Post Build Commands Done. =====


Building: $(OutputFile)

$(OutputFile): $(Objects)
ifeq ($(ProjectType),app)
	$(LinkCmd)
endif
ifeq ($(ProjectType),so)
	$(SoGenCmd)
endif
ifeq ($(ProjectType),ar)
	$(ArGenCmd)
endif

$(Objects): | PreBuild

PreBuild:


DirSanity:
	@$(MKDIR) $(OutDir)
	@$(MKDIR) $(dir $(OutputFile))

clean:
	$(RM) $(PrePrcs)
	$(RM) $(Depends)
	$(RM) $(Objects)
	$(RM) $(OutputFile)

$(OutDir)/ant$(PrpExt): ant.c
	$(CPrpCmd)

$(OutDir)/ant$(ObjExt): ant.c $(OutDir)/ant$(DepExt)
	$(CCmpCmd)

$(OutDir)/ant$(DepExt): ant.c
	@$(CDepGenCmd)

$(OutDir)/args$(PrpExt): args.c
	$(CPrpCmd)

$(OutDir)/args$(ObjExt): args.c $(OutDir)/args$(DepExt)
	$(CCmpCmd)

$(OutDir)/args$(DepExt): args.c
	@$(CDepGenCmd)

$(OutDir)/asm$(PrpExt): asm.c
	$(CPrpCmd)

$(OutDir)/asm$(ObjExt): asm.c $(OutDir)/asm$(DepExt)
	$(CCmpCmd)

$(OutDir)/asm$(DepExt): asm.c
	@$(CDepGenCmd)

$(OutDir)/asp$(PrpExt): asp.c
	$(CPrpCmd)

$(OutDir)/asp$(ObjExt): asp.c $(OutDir)/asp$(DepExt)
	$(CCmpCmd)

$(OutDir)/asp$(DepExt): asp.c
	@$(CDepGenCmd)

$(OutDir)/awk$(PrpExt): awk.c
	$(CPrpCmd)

$(OutDir)/awk$(ObjExt): awk.c $(OutDir)/awk$(DepExt)
	$(CCmpCmd)

$(OutDir)/awk$(DepExt): awk.c
	@$(CDepGenCmd)

$(OutDir)/basic$(PrpExt): basic.c
	$(CPrpCmd)

$(OutDir)/basic$(ObjExt): basic.c $(OutDir)/basic$(DepExt)
	$(CCmpCmd)

$(OutDir)/basic$(DepExt): basic.c
	@$(CDepGenCmd)

$(OutDir)/beta$(PrpExt): beta.c
	$(CPrpCmd)

$(OutDir)/beta$(ObjExt): beta.c $(OutDir)/beta$(DepExt)
	$(CCmpCmd)

$(OutDir)/beta$(DepExt): beta.c
	@$(CDepGenCmd)

$(OutDir)/c$(PrpExt): c.c
	$(CPrpCmd)

$(OutDir)/c$(ObjExt): c.c $(OutDir)/c$(DepExt)
	$(CCmpCmd)

$(OutDir)/c$(DepExt): c.c
	@$(CDepGenCmd)

$(OutDir)/cobol$(PrpExt): cobol.c
	$(CPrpCmd)

$(OutDir)/cobol$(ObjExt): cobol.c $(OutDir)/cobol$(DepExt)
	$(CCmpCmd)

$(OutDir)/cobol$(DepExt): cobol.c
	@$(CDepGenCmd)

$(OutDir)/debug$(PrpExt): debug.c
	$(CPrpCmd)

$(OutDir)/debug$(ObjExt): debug.c $(OutDir)/debug$(DepExt)
	$(CCmpCmd)

$(OutDir)/debug$(DepExt): debug.c
	@$(CDepGenCmd)

$(OutDir)/dosbatch$(PrpExt): dosbatch.c
	$(CPrpCmd)

$(OutDir)/dosbatch$(ObjExt): dosbatch.c $(OutDir)/dosbatch$(DepExt)
	$(CCmpCmd)

$(OutDir)/dosbatch$(DepExt): dosbatch.c
	@$(CDepGenCmd)

$(OutDir)/eiffel$(PrpExt): eiffel.c
	$(CPrpCmd)

$(OutDir)/eiffel$(ObjExt): eiffel.c $(OutDir)/eiffel$(DepExt)
	$(CCmpCmd)

$(OutDir)/eiffel$(DepExt): eiffel.c
	@$(CDepGenCmd)

$(OutDir)/entry$(PrpExt): entry.c
	$(CPrpCmd)

$(OutDir)/entry$(ObjExt): entry.c $(OutDir)/entry$(DepExt)
	$(CCmpCmd)

$(OutDir)/entry$(DepExt): entry.c
	@$(CDepGenCmd)

$(OutDir)/erlang$(PrpExt): erlang.c
	$(CPrpCmd)

$(OutDir)/erlang$(ObjExt): erlang.c $(OutDir)/erlang$(DepExt)
	$(CCmpCmd)

$(OutDir)/erlang$(DepExt): erlang.c
	@$(CDepGenCmd)

$(OutDir)/flex$(PrpExt): flex.c
	$(CPrpCmd)

$(OutDir)/flex$(ObjExt): flex.c $(OutDir)/flex$(DepExt)
	$(CCmpCmd)

$(OutDir)/flex$(DepExt): flex.c
	@$(CDepGenCmd)

$(OutDir)/fortran$(PrpExt): fortran.c
	$(CPrpCmd)

$(OutDir)/fortran$(ObjExt): fortran.c $(OutDir)/fortran$(DepExt)
	$(CCmpCmd)

$(OutDir)/fortran$(DepExt): fortran.c
	@$(CDepGenCmd)

$(OutDir)/get$(PrpExt): get.c
	$(CPrpCmd)

$(OutDir)/get$(ObjExt): get.c $(OutDir)/get$(DepExt)
	$(CCmpCmd)

$(OutDir)/get$(DepExt): get.c
	@$(CDepGenCmd)

$(OutDir)/html$(PrpExt): html.c
	$(CPrpCmd)

$(OutDir)/html$(ObjExt): html.c $(OutDir)/html$(DepExt)
	$(CCmpCmd)

$(OutDir)/html$(DepExt): html.c
	@$(CDepGenCmd)

$(OutDir)/jscript$(PrpExt): jscript.c
	$(CPrpCmd)

$(OutDir)/jscript$(ObjExt): jscript.c $(OutDir)/jscript$(DepExt)
	$(CCmpCmd)

$(OutDir)/jscript$(DepExt): jscript.c
	@$(CDepGenCmd)

$(OutDir)/keyword$(PrpExt): keyword.c
	$(CPrpCmd)

$(OutDir)/keyword$(ObjExt): keyword.c $(OutDir)/keyword$(DepExt)
	$(CCmpCmd)

$(OutDir)/keyword$(DepExt): keyword.c
	@$(CDepGenCmd)

$(OutDir)/lisp$(PrpExt): lisp.c
	$(CPrpCmd)

$(OutDir)/lisp$(ObjExt): lisp.c $(OutDir)/lisp$(DepExt)
	$(CCmpCmd)

$(OutDir)/lisp$(DepExt): lisp.c
	@$(CDepGenCmd)

$(OutDir)/lregex$(PrpExt): lregex.c
	$(CPrpCmd)

$(OutDir)/lregex$(ObjExt): lregex.c $(OutDir)/lregex$(DepExt)
	$(CCmpCmd)

$(OutDir)/lregex$(DepExt): lregex.c
	@$(CDepGenCmd)

$(OutDir)/lua$(PrpExt): lua.c
	$(CPrpCmd)

$(OutDir)/lua$(ObjExt): lua.c $(OutDir)/lua$(DepExt)
	$(CCmpCmd)

$(OutDir)/lua$(DepExt): lua.c
	@$(CDepGenCmd)

$(OutDir)/main$(PrpExt): main.c
	$(CPrpCmd)

$(OutDir)/main$(ObjExt): main.c $(OutDir)/main$(DepExt)
	$(CCmpCmd)

$(OutDir)/main$(DepExt): main.c
	@$(CDepGenCmd)

$(OutDir)/make$(PrpExt): make.c
	$(CPrpCmd)

$(OutDir)/make$(ObjExt): make.c $(OutDir)/make$(DepExt)
	$(CCmpCmd)

$(OutDir)/make$(DepExt): make.c
	@$(CDepGenCmd)

$(OutDir)/matlab$(PrpExt): matlab.c
	$(CPrpCmd)

$(OutDir)/matlab$(ObjExt): matlab.c $(OutDir)/matlab$(DepExt)
	$(CCmpCmd)

$(OutDir)/matlab$(DepExt): matlab.c
	@$(CDepGenCmd)

$(OutDir)/ocaml$(PrpExt): ocaml.c
	$(CPrpCmd)

$(OutDir)/ocaml$(ObjExt): ocaml.c $(OutDir)/ocaml$(DepExt)
	$(CCmpCmd)

$(OutDir)/ocaml$(DepExt): ocaml.c
	@$(CDepGenCmd)

$(OutDir)/options$(PrpExt): options.c
	$(CPrpCmd)

$(OutDir)/options$(ObjExt): options.c $(OutDir)/options$(DepExt)
	$(CCmpCmd)

$(OutDir)/options$(DepExt): options.c
	@$(CDepGenCmd)

$(OutDir)/parse$(PrpExt): parse.c
	$(CPrpCmd)

$(OutDir)/parse$(ObjExt): parse.c $(OutDir)/parse$(DepExt)
	$(CCmpCmd)

$(OutDir)/parse$(DepExt): parse.c
	@$(CDepGenCmd)

$(OutDir)/pascal$(PrpExt): pascal.c
	$(CPrpCmd)

$(OutDir)/pascal$(ObjExt): pascal.c $(OutDir)/pascal$(DepExt)
	$(CCmpCmd)

$(OutDir)/pascal$(DepExt): pascal.c
	@$(CDepGenCmd)

$(OutDir)/perl$(PrpExt): perl.c
	$(CPrpCmd)

$(OutDir)/perl$(ObjExt): perl.c $(OutDir)/perl$(DepExt)
	$(CCmpCmd)

$(OutDir)/perl$(DepExt): perl.c
	@$(CDepGenCmd)

$(OutDir)/php$(PrpExt): php.c
	$(CPrpCmd)

$(OutDir)/php$(ObjExt): php.c $(OutDir)/php$(DepExt)
	$(CCmpCmd)

$(OutDir)/php$(DepExt): php.c
	@$(CDepGenCmd)

$(OutDir)/python$(PrpExt): python.c
	$(CPrpCmd)

$(OutDir)/python$(ObjExt): python.c $(OutDir)/python$(DepExt)
	$(CCmpCmd)

$(OutDir)/python$(DepExt): python.c
	@$(CDepGenCmd)

$(OutDir)/read$(PrpExt): read.c
	$(CPrpCmd)

$(OutDir)/read$(ObjExt): read.c $(OutDir)/read$(DepExt)
	$(CCmpCmd)

$(OutDir)/read$(DepExt): read.c
	@$(CDepGenCmd)

$(OutDir)/readtags$(PrpExt): readtags.c
	$(CPrpCmd)

$(OutDir)/readtags$(ObjExt): readtags.c $(OutDir)/readtags$(DepExt)
	$(CCmpCmd)

$(OutDir)/readtags$(DepExt): readtags.c
	@$(CDepGenCmd)

$(OutDir)/rexx$(PrpExt): rexx.c
	$(CPrpCmd)

$(OutDir)/rexx$(ObjExt): rexx.c $(OutDir)/rexx$(DepExt)
	$(CCmpCmd)

$(OutDir)/rexx$(DepExt): rexx.c
	@$(CDepGenCmd)

$(OutDir)/routines$(PrpExt): routines.c
	$(CPrpCmd)

$(OutDir)/routines$(ObjExt): routines.c $(OutDir)/routines$(DepExt)
	$(CCmpCmd)

$(OutDir)/routines$(DepExt): routines.c
	@$(CDepGenCmd)

$(OutDir)/ruby$(PrpExt): ruby.c
	$(CPrpCmd)

$(OutDir)/ruby$(ObjExt): ruby.c $(OutDir)/ruby$(DepExt)
	$(CCmpCmd)

$(OutDir)/ruby$(DepExt): ruby.c
	@$(CDepGenCmd)

$(OutDir)/scheme$(PrpExt): scheme.c
	$(CPrpCmd)

$(OutDir)/scheme$(ObjExt): scheme.c $(OutDir)/scheme$(DepExt)
	$(CCmpCmd)

$(OutDir)/scheme$(DepExt): scheme.c
	@$(CDepGenCmd)

$(OutDir)/sh$(PrpExt): sh.c
	$(CPrpCmd)

$(OutDir)/sh$(ObjExt): sh.c $(OutDir)/sh$(DepExt)
	$(CCmpCmd)

$(OutDir)/sh$(DepExt): sh.c
	@$(CDepGenCmd)

$(OutDir)/slang$(PrpExt): slang.c
	$(CPrpCmd)

$(OutDir)/slang$(ObjExt): slang.c $(OutDir)/slang$(DepExt)
	$(CCmpCmd)

$(OutDir)/slang$(DepExt): slang.c
	@$(CDepGenCmd)

$(OutDir)/sml$(PrpExt): sml.c
	$(CPrpCmd)

$(OutDir)/sml$(ObjExt): sml.c $(OutDir)/sml$(DepExt)
	$(CCmpCmd)

$(OutDir)/sml$(DepExt): sml.c
	@$(CDepGenCmd)

$(OutDir)/sort$(PrpExt): sort.c
	$(CPrpCmd)

$(OutDir)/sort$(ObjExt): sort.c $(OutDir)/sort$(DepExt)
	$(CCmpCmd)

$(OutDir)/sort$(DepExt): sort.c
	@$(CDepGenCmd)

$(OutDir)/sql$(PrpExt): sql.c
	$(CPrpCmd)

$(OutDir)/sql$(ObjExt): sql.c $(OutDir)/sql$(DepExt)
	$(CCmpCmd)

$(OutDir)/sql$(DepExt): sql.c
	@$(CDepGenCmd)

$(OutDir)/strlist$(PrpExt): strlist.c
	$(CPrpCmd)

$(OutDir)/strlist$(ObjExt): strlist.c $(OutDir)/strlist$(DepExt)
	$(CCmpCmd)

$(OutDir)/strlist$(DepExt): strlist.c
	@$(CDepGenCmd)

$(OutDir)/tcl$(PrpExt): tcl.c
	$(CPrpCmd)

$(OutDir)/tcl$(ObjExt): tcl.c $(OutDir)/tcl$(DepExt)
	$(CCmpCmd)

$(OutDir)/tcl$(DepExt): tcl.c
	@$(CDepGenCmd)

$(OutDir)/tex$(PrpExt): tex.c
	$(CPrpCmd)

$(OutDir)/tex$(ObjExt): tex.c $(OutDir)/tex$(DepExt)
	$(CCmpCmd)

$(OutDir)/tex$(DepExt): tex.c
	@$(CDepGenCmd)

$(OutDir)/verilog$(PrpExt): verilog.c
	$(CPrpCmd)

$(OutDir)/verilog$(ObjExt): verilog.c $(OutDir)/verilog$(DepExt)
	$(CCmpCmd)

$(OutDir)/verilog$(DepExt): verilog.c
	@$(CDepGenCmd)

$(OutDir)/vhdl$(PrpExt): vhdl.c
	$(CPrpCmd)

$(OutDir)/vhdl$(ObjExt): vhdl.c $(OutDir)/vhdl$(DepExt)
	$(CCmpCmd)

$(OutDir)/vhdl$(DepExt): vhdl.c
	@$(CDepGenCmd)

$(OutDir)/vim$(PrpExt): vim.c
	$(CPrpCmd)

$(OutDir)/vim$(ObjExt): vim.c $(OutDir)/vim$(DepExt)
	$(CCmpCmd)

$(OutDir)/vim$(DepExt): vim.c
	@$(CDepGenCmd)

$(OutDir)/vstring$(PrpExt): vstring.c
	$(CPrpCmd)

$(OutDir)/vstring$(ObjExt): vstring.c $(OutDir)/vstring$(DepExt)
	$(CCmpCmd)

$(OutDir)/vstring$(DepExt): vstring.c
	@$(CDepGenCmd)

$(OutDir)/yacc$(PrpExt): yacc.c
	$(CPrpCmd)

$(OutDir)/yacc$(ObjExt): yacc.c $(OutDir)/yacc$(DepExt)
	$(CCmpCmd)

$(OutDir)/yacc$(DepExt): yacc.c
	@$(CDepGenCmd)

$(OutDir)/macro$(PrpExt): macro.c
	$(CPrpCmd)

$(OutDir)/macro$(ObjExt): macro.c $(OutDir)/macro$(DepExt)
	$(CCmpCmd)

$(OutDir)/macro$(DepExt): macro.c
	@$(CDepGenCmd)

# Generate and include dependencies if we can
ifeq ($(shell test -d $(OutDir) && echo yes || echo no),yes)
  ifeq ($(shell test -f $(word 1,$(Depends)) && echo yes || echo no),yes)
    include $(Depends)
  endif
endif

.PHONY: $(PHONY)
